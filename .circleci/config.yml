#version: 2.1
#
#orbs:
#  android: circleci/android@2.1.2
#
#references:
#  cache_key: &cache_key
#    key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
#
#  config_android: &config_android
#    working_directory: ~/Modulization
#    docker:
#      - image: circleci/android:api-30
#
#    environment:
#      JVM_OPTS: -Xmx3200m
#
#  # ---------------------------------------------------------------------------------------------------------------------
#  # Chmod Permission Gradlew
#  # ---------------------------------------------------------------------------------------------------------------------
#  gradlew_permission: &gradlew_permission
#    run:
#      name: chmod permissions
#      command: chmod +x ./gradlew
#
#  build_test: &build_test
#    executor:
#      name: android/android-machine
#    steps:
#      - checkout
#      - *gradlew_permission
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#
#      - run:
#          name: Build app
#          command: ./gradlew build
#
#  deploy_debug_to_firebase: &deploy_debug_to_firebase
#    <<: *config_android
#    steps:
#      - checkout
#      - run:
#          name: Build debug
#          command: ./gradlew :app:assembleDebug
#
#      - run:
#          name: Install Firebase CLI
#          command: |
#            curl -sL https://firebase.tools | bash
#
##    - run:
##        name: Upload File APK Debug to Firebase App Distribution
##        command: firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk --app $FIREBASE_APP_ID --token $FIREBASE_TOKEN_CLI --release-notes "Upload APK to Firebase"
#
#jobs:
#  build_test:
#    <<: *build_test
#
#  deploy_debug_to_firebase:
#    <<: *deploy_debug_to_firebase
#
#workflows:
#  version: 1
#  build_test_and_deploy:
#    jobs:
#      - build_test
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
references:

  # Docker Image Configs
  config_android: &config_android
    working_directory: ~/Modulization
    docker:
      - image: circleci/android:api-26-alpha

    environment:
      JVM_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64/jre

  # ---------------------------------------------------------------------------------------------------------------------
  # CACHE GRADLE
  # ---------------------------------------------------------------------------------------------------------------------
  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}

  save_gradle_cache: &save_gradle_cache
    save_cache:
      paths:
        - ~/.gradle
        - ~/.m2
      key: jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}

  # ---------------------------------------------------------------------------------------------------------------------
  # DOWNLOAD ANDROID DEPENDENCIES
  # ---------------------------------------------------------------------------------------------------------------------
  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  staging_distribution:
    <<: *config_android

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run: sudo chmod +x ./gradlew
      - *restore_gradle_cache
      - run: sudo apt-get install gradle-2.6
      - run: yes | sdkmanager --licenses || exit 0
      - run: yes | sdkmanager --update || exit 0
      - run: yes | sdkmanager "build-tools;26.0.2" || exit 0
      - *save_gradle_cache
      - *android_dependencies
      - run: ./gradlew assembleDebug

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - staging_distribution
