#version: 2.1
#
## Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
## See: https://circleci.com/docs/2.0/orb-intro/
#orbs:
#  ruby: circleci/ruby@2.0.0
#  android: circleci/android@2.0
## Define a job to be invoked later in a workflow.
## See: https://circleci.com/docs/2.0/configuration-reference/#jobs
#references:
#
#  # Docker Image Configs
#  config_android: &config_android
#    working_directory: ~/Modulization
#    docker:
#      - image: circleci/android:api-26-alpha
#
#    environment:
#      TERM: dumb
#      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
#      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
#      JAVA_HOME: $(readlink -f $(which java) | sed "s:/bin/java::")
#
#  # ---------------------------------------------------------------------------------------------------------------------
#  # CACHE GRADLE
#  # ---------------------------------------------------------------------------------------------------------------------
#  restore_gradle_cache: &restore_gradle_cache
#    restore_cache:
#      key: jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}
#
#  save_gradle_cache: &save_gradle_cache
#    save_cache:
#      paths:
#        - ~/.gradle
#        - ~/.m2
#      key: jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}
#
#  # ---------------------------------------------------------------------------------------------------------------------
#  # DOWNLOAD ANDROID DEPENDENCIES
#  # ---------------------------------------------------------------------------------------------------------------------
#  android_dependencies: &android_dependencies
#    run:
#      name: Download Android Dependencies
#      command: ./gradlew androidDependencies
#
#  # ---------------------------------------------------------------------------------------------------------------------
#  # CACHE RUBY FOR FASTLANE
#  # ---------------------------------------------------------------------------------------------------------------------
#  restore_gems_cache: &restore_gems_cache
#    restore_cache:
#      key: gems-{{ checksum "fastlane/release_notes.txt" }}
#
#  save_gems_cache: &save_gems_cache
#    save_cache:
#      paths:
#        - vendor/bundle
#      key: gems-{{ checksum "fastlane/release_notes.txt" }}
#
#  ruby_dependencies: &ruby_dependencies
#    run:
#      name: Download Ruby Dependencies
#      command: |
#        gem install bundler
#        bundle check || bundle update --system || bundle install --path vendor/bundle
#
#jobs:
#  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#  staging_distribution:
#
#    executor:
#      name: android/android-docker
#      tag: "2022.0.7"
#    # Add steps to the job
#    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#    steps:
#      # Checkout the code as the first step.
#      - checkout
#      - ruby/install:
#          version: '3.0.1'
#      - *ruby_dependencies
#      - run: sudo chmod +x ./gradlew
#      - *restore_gradle_cache
#      - *restore_gems_cache
#      - run: yes | sdkmanager --licenses || exit 0
#      - run: yes | sdkmanager --update || exit 0
#      - run: yes | sdkmanager "platforms;android-33" || exit 0
#      - run: bundle install
#      - run: bundle clean --force
#      - run: bundle update fastlane
#      - *save_gradle_cache
#      - *save_gems_cache
##      - run: echo $JAVA_HOME
#      - run:
#          name: Run instrumentation tests in Firebase Test Lab
#          command: bundle exec fastlane buildBuild
#
## Invoke jobs via workflows
## See: https://circleci.com/docs/2.0/configuration-reference/#workflows
#workflows:
#  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#    # Inside the workflow, you define the jobs you want to run.
#    jobs:
#      - staging_distribution

version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.1.2
  node: circleci/node@5.0.2
  docker: circleci/docker@2.2.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
references:

  # Docker Image Configs
  config_android: &config_android
    working_directory: ~/Modulization
    docker:
      - image: circleci/android:api-26-alpha

    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
      JAVA_HOME: $(readlink -f $(which java) | sed "s:/bin/java::")

  # ---------------------------------------------------------------------------------------------------------------------
  # CACHE GRADLE
  # ---------------------------------------------------------------------------------------------------------------------
  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}

  save_gradle_cache: &save_gradle_cache
    save_cache:
      paths:
        - ~/.gradle
        - ~/.m2
      key: jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}

  # ---------------------------------------------------------------------------------------------------------------------
  # DOWNLOAD ANDROID DEPENDENCIES
  # ---------------------------------------------------------------------------------------------------------------------
  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # ---------------------------------------------------------------------------------------------------------------------
  # CACHE RUBY FOR FASTLANE
  # ---------------------------------------------------------------------------------------------------------------------
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: gems-{{ checksum "fastlane/release_notes.txt" }}

  save_gems_cache: &save_gems_cache
    save_cache:
      paths:
        - vendor/bundle
      key: gems-{{ checksum "fastlane/release_notes.txt" }}

  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: |
        gem install bundler
        bundle check || bundle update --system || bundle install --path vendor/bundle

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  staging_distribution:
    docker:
      - image: cimg/android:2023.02
    steps:
      # Checkout the code as the first step.
      - checkout
      - run: fastlane add_plugin fastlane-plugin-firebase_app_distribution
      - run: fastlane add_plugin -plugin-increment_version_code
      - run: sudo chmod +x ./gradlew
      - run: fastlane buildBuild

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - staging_distribution
